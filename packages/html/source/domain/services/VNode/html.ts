import { isNotNull } from '@typed/logic'
import { Nothing } from '@typed/maybe'
import { mapObj } from '@typed/objects'
import {
  CombinedEnvsOf,
  HtmlTagName,
  HtmlVNode,
  PropsFrom,
  VNode,
  VNodeProps,
  VNodeType,
} from '../../model/VNode'

export function html<
  E extends {},
  A extends HtmlTagName = HtmlTagName,
  B extends ReadonlyArray<VNode | null> = ReadonlyArray<VNode | null>
>(
  tagName: A,
  props: (VNodeProps<E, A> & PropsFrom<A>) | null,
  children: B,
): HtmlVNode<E & CombinedEnvsOf<B>, A> {
  return {
    type: VNodeType.Html,
    tagName,
    props,
    children: children.filter(isNotNull),
    node: props?.ref ?? { current: Nothing },
    listener: { current: Nothing },
  }
}

export function isHtml(vNode: VNode): vNode is HtmlVNode {
  return vNode.type === VNodeType.Html
}

const TAG_NAME_MAP: Record<Exclude<HtmlTagName, 'var' | 'html'>, null> = {
  object: null,
  a: null,
  abbr: null,
  address: null,
  applet: null,
  area: null,
  article: null,
  aside: null,
  audio: null,
  b: null,
  base: null,
  basefont: null,
  bdi: null,
  bdo: null,
  blockquote: null,
  body: null,
  br: null,
  button: null,
  canvas: null,
  caption: null,
  cite: null,
  code: null,
  col: null,
  colgroup: null,
  data: null,
  datalist: null,
  dd: null,
  del: null,
  details: null,
  dfn: null,
  dialog: null,
  dir: null,
  div: null,
  dl: null,
  dt: null,
  em: null,
  embed: null,
  fieldset: null,
  figcaption: null,
  figure: null,
  font: null,
  footer: null,
  form: null,
  frame: null,
  frameset: null,
  h1: null,
  h2: null,
  h3: null,
  h4: null,
  h5: null,
  h6: null,
  head: null,
  header: null,
  hgroup: null,
  hr: null,
  i: null,
  iframe: null,
  img: null,
  input: null,
  ins: null,
  kbd: null,
  label: null,
  legend: null,
  li: null,
  link: null,
  main: null,
  map: null,
  mark: null,
  marquee: null,
  menu: null,
  meta: null,
  meter: null,
  nav: null,
  noscript: null,
  ol: null,
  optgroup: null,
  option: null,
  output: null,
  p: null,
  param: null,
  picture: null,
  pre: null,
  progress: null,
  q: null,
  rp: null,
  rt: null,
  ruby: null,
  s: null,
  samp: null,
  script: null,
  section: null,
  select: null,
  slot: null,
  small: null,
  source: null,
  span: null,
  strong: null,
  style: null,
  sub: null,
  summary: null,
  sup: null,
  table: null,
  tbody: null,
  td: null,
  template: null,
  textarea: null,
  tfoot: null,
  th: null,
  thead: null,
  time: null,
  title: null,
  tr: null,
  track: null,
  u: null,
  ul: null,
  video: null,
  wbr: null,
}

const createHtmlHelper = <A extends HtmlTagName>(tagName: A) => <
  E extends {},
  B extends ReadonlyArray<VNode | null> = ReadonlyArray<VNode | null>
>(
  props: (VNodeProps<E, A> & PropsFrom<A>) | null,
  children: B,
): HtmlVNode<E & CombinedEnvsOf<B>, A> => html<E, A, B>(tagName, props, children)

export const {
  object,
  a,
  abbr,
  address,
  applet,
  area,
  article,
  aside,
  audio,
  b,
  base,
  basefont,
  bdi,
  bdo,
  blockquote,
  body,
  br,
  button,
  canvas,
  caption,
  cite,
  code,
  col,
  colgroup,
  data,
  datalist,
  dd,
  del,
  details,
  dfn,
  dialog,
  dir,
  div,
  dl,
  dt,
  em,
  embed,
  fieldset,
  figcaption,
  figure,
  font,
  footer,
  form,
  frame,
  frameset,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  head,
  header,
  hgroup,
  hr,
  i,
  iframe,
  img,
  input,
  ins,
  kbd,
  label,
  legend,
  li,
  link,
  main,
  map,
  mark,
  marquee,
  menu,
  meta,
  meter,
  nav,
  noscript,
  ol,
  optgroup,
  option,
  output,
  p,
  param,
  picture,
  pre,
  progress,
  q,
  rp,
  rt,
  ruby,
  s,
  samp,
  script,
  section,
  select,
  slot,
  small,
  source,
  span,
  strong,
  style,
  sub,
  summary,
  sup,
  table,
  tbody,
  td,
  template,
  textarea,
  tfoot,
  th,
  thead,
  time,
  title,
  tr,
  track,
  u,
  ul,
  video,
  wbr,
} = (mapObj((k) => createHtmlHelper(k) as any, TAG_NAME_MAP) as any) as {
  readonly [A in Exclude<HtmlTagName, 'var' | 'html'>]: <
    E extends {},
    B extends ReadonlyArray<VNode | null> = ReadonlyArray<VNode | null>
  >(
    props: (VNodeProps<E, A> & PropsFrom<A>) | null,
    children: B,
  ) => HtmlVNode<E & CombinedEnvsOf<B>, A>
}
